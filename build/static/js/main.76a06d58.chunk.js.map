{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playVars","autoplay","API_KEY","api_requests","fetchOriginals","fetchTrending","fetchPopular","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76a06d58.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create ({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // if [], run once on load and dont run again\r\n        // if [movies], runs if this changes\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default Row\r\n\r\n","const API_KEY = \"7ce64cf5ef7bf9d74fef966c4e86de10\";\r\n\r\nconst api_requests = {\r\n    fetchOriginals: `/discover/tv?api_key=${API_KEY}`,\r\n    fetchTrending: `/trending/all/day?api_key=${API_KEY}`,\r\n    fetchPopular: `/movie/popular?api_key=${API_KEY}`\r\n}\r\n\r\nexport default api_requests;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState ([]);\r\n\r\n    /* run once when Banner loads, ramdomize the movie */\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n        const request = await axios.get(requests.fetchOriginals);\r\n        setMovie(\r\n            request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length)\r\n            ]\r\n        );\r\n        return requests;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // console.log(movie);\r\n\r\n    {/* after definitely string length, add ... */}\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n                style={{\r\n                   backgroundSize: \"cover\",\r\n                   backgroundImage: `url(\r\n                       \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                   )`,\r\n                   backgroundPosition: \"center center\",\r\n                }}> \r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\"> {/* checking if it exists, if not go to the next in case API doesn't use consistent naming */}\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n               <div className=\"banner_buttons\">\r\n                   <button className=\"banner_button\">Play</button>\r\n                   <button className=\"banner_button\">My List</button>\r\n               </div>\r\n                <h1 className=\"banner_description\">\r\n                    {/* after 150 characters, add ... */}\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n\r\n            <div className=\"banner_fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport './nav.css'\r\n\r\nfunction Nav() {\r\n    // set state variables\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 75) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n\r\n        // Don't forget to remove the listener\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img \r\n                className=\"logo_netflix\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1024px-Netflix_2015_logo.svg.png\"\r\n                alt=\"Netflix logo\" />\r\n\r\n            <img \r\n                className=\"user_icon\"\r\n                src=\"https://pbs.twimg.com/media/D8tCa48VsAA4lxn.jpg\"\r\n                alt=\"User account icon\" />       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Row from './Row';\r\nimport Banner from './Banner';\r\nimport requests from './requests';\r\nimport Nav from './Nav';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row \r\n        title=\"NETFLIX ORIGINALS\" \r\n        fetchUrl={requests.fetchOriginals} \r\n        isLargeRow\r\n        />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Popular Movies\" fetchUrl={requests.fetchPopular} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}